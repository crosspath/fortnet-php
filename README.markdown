# Система пропусков

Система пропусков показывает проходы по пропуску и позволяет выгрузить эти записи в Excel.

## Порядок регистрации прохода (§1)

1. пропуск прислоняют к датчику
2. датчик отправляет команду системе [Fortnet](http://fortnet.ru)
3. система Fortnet записывает проход в БД ([Firebird](http://firebirdsql.org))

## Порядок загрузки страницы со статистикой проходов (§2)

1. браузер отправляет запрос на сервер
2. сервер вызывает php и просит его выполнить файл index.php
3. файл index.php подключает другие файлы и настраивает среду выполнения
4. по условиям запроса определяется, какой контроллер и какое действие надо вызвать
5. условия запроса выступает в роли фильтров выборки данных из БД
6. получение данных из БД
7. при необходимости: обработка данных, группировка
8. отправка результата браузеру

## Порядок выгрузки данных для Excel (§3)

* формирование файла Excel на сервере с Ruby (см. extra/ruby/)

  1. браузер отправляет запрос на сервер с Ruby
  2. скрипт на Ruby вызывает API этой системы для получения статистики проходов
  3. шаги 2-7 (§2)
  4. отправка результата Redmine
  5. формирование файла Excel с данными и стилями
  6. отправка файла браузеру

* формирование файла Excel в этой системе

  1. шаги 1-7 (§2)
  2. формирование файла Excel с данными и стилями
  3. отправка файла браузеру

Структура файлов может различаться, поскольку они формируются в разных системах.

## Настройка

### Кодировка

Кодировка по умолчанию - UTF-8. Можно поставить cp1251:

1. Заменить "AddDefaultCharset utf-8" на "AddDefaultCharset windows-1251" в файле .htaccess
2. Изменить кодировку файла config/texts.ini на windows-1251 (может встречаться под названием ANSI)
3. Добавить/изменить параметр "encoding" в файле config/database.php

[Названия кодировок в Firebird](http://www.firebirdsql.org/refdocs/langrefupd25-charsets.html)

### База данных

Настройки подключения к БД находятся в файле config/database.php

### Режим отладки

По умолчанию при возникновении ошибки появляется сообщение с подробной информацией, в том числе с названиями выполняемых файлов. Вы можете отключить это, изменив параметр DEBUG в файле lib/App.php: ```const DEBUG = false;```

## Для разработчиков

### Кратко об архитектуре

Это приложение использует фреймворк Slim, потому что он легковесный и позволяет снять ряд проблем по маршрутизации, и библиотеку Zepto как лёгкую замену jQuery, к которому все привыкли.
Источник вдохновения при построении архитектуры - Rails. Автор постарался сделать так, чтобы структура папок и приёмы программирования были близки к таковым в Rails.
Дополнительными ограничениями в архитектуре были принципы DRY, KISS и YAGNI.

Функция t - сокращение для функции Text::get, возвращающей текст из файла config/texts.ini.
$h в шаблонах - экземпляр класса Helper, содержащего все функции из хелперов в папке app/helpers/.

### TODO

* Сделать код ещё легче и быстрее.
* Если это приложение будет использовать кто-то, кто не понимает по-русски, то можно:
  * простой способ - перевести config/texts.ini
  * посложнее - добавить язык в какой-нибудь конфигурационный файл, перевести config/texts.ini и положить файлы с текстами в config/locales/, например config/locales/ru.ini
* Упростить изменение кодировки:
  * Добавить выбор кодировки в какой-нибудь конфигурационный файл.
  * Передавать header(Charset) в соответствие с указанной кодировкой; убрать строку "AddDefaultCharset" из .htaccess.
  * Добавить в Text::get изменение кодировки текста в соответствие с указанной кодировкой.
* Добавить конфигурационный файл config/app.ini для хранения значений "язык", "кодировка" (см. пункты выше) и "debug".
* Сейчас в системе есть только один шаблон. Когда будет больше шаблонов, надо будет добавить папку app/views/layouts/ и хранить в ней layout; переопределить в классе App функцию render, добавив загрузку layout.
